#!/bin/sh

_arg_t=2

fname=$(basename "$0")
usage () {
  echo "$fname [options] [command]
Sends notification when the given command finished executing

Options:
  -h          Show this message then exit
  -t <sec>    Time the notification stays. By default 2
  -T <title>  Notification title
  -m <string> Displays this message when finished. Variable resolution on
                > Default message is '<command> finished'
  -y          Display a yes/no prompt instead. Time doesn't apply"
}

error() {
  printf "\033[1;31m%s\033[0m\n" "$1" >&2
  return 1
}

# $1 = message , $2 = title , $3 = time
notify () {
  if which kdialog >/dev/null ; then
    kdialog --passivepopup "$1" "$3" --title "$2"
  elif which notify-send >/dev/null ; then
    notify-send -t "$3" "$2" "$1"
  else
    error "No supported notification"
  fi
}

yesno () {
  if which kdialog >/dev/null ; then
    kdialog --yesno "$1" --title "$2"
  elif which zenity ; then
    zenity --question --text="$1" --title="$2"
  else
    error "No supported prompt"
  fi
}

# read options
unset opt_y opt_w
while getopts ":hywm:T:t:" opt;
do
  case $opt in
    h) usage && exit 1 ;;
    y) opt_y=y ;;
    m) message=$OPTARG ;;
    T) title=$OPTARG ;;
    t) _arg_t=$OPTARG ;;
    w) opt_w=y ;;
    *) echo "Unknown option: $OPTARG" >&2 ; usage ; exit 2 ;;
    esac
done

shift $((OPTIND-1))

# exec and resolve message
if [ $# -gt 0 ] ; then
  [ -z "$message" ] && message="'$*' finished"
  [ -z "$title" ] && title=$*
  "$@"
else
  [ -z "$message" ] && message="Ping"
  [ -z "$title" ] && title="Ping"
fi

# Send the notification
if [ -n "$opt_y" ] ; then
  yesno "$message" "$title"
else
  notify "$message" "$title" "$_arg_t"
fi
